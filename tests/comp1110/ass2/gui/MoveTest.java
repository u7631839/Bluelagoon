package comp1110.ass2.gui;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class MoveTest {


   @Test
    void getOccupiedCoordinates() {
       Move move = new Move();
       String stateString = "a 13 2; c 1 E; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,4 2,9 3,6 6,6 10,9 12,10 B 4,2 6,11 8,8 10,7 10,11 12,1 W 0,10 2,11 3,4 4,10 12,4 12,8 P 2,2 2,3 4,3 8,5 8,10 11,3 S 0,1 3,0 3,2 6,1 6,4 8,0 10,0 10,5; p 0 0 0 0 0 0 0 S 9,9 T; p 1 0 0 0 0 0 0 S T;";
       Set<String> occupied = move.getOccupiedCoordinates(stateString);

       Assertions.assertEquals("[9,9]", occupied.toString(), "");
       //Assertions.assertTrue(occupied.contains("9,9"));
   }

   @Test
    void getCurrentPlayerId(){
       Move move = new Move();
       String stateString = "a 13 2; c 1 E; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,4 2,9 3,6 6,6 10,9 12,10 B 4,2 6,11 8,8 10,7 10,11 12,1 W 0,10 2,11 3,4 4,10 12,4 12,8 P 2,2 2,3 4,3 8,5 8,10 11,3 S 0,1 3,0 3,2 6,1 6,4 8,0 10,0 10,5; p 0 0 0 0 0 0 0 S 9,9 T; p 1 0 0 0 0 0 0 S T;";
       String currentPlayerId = move.getCurrentPlayerId(stateString);
       Assertions.assertEquals("1", currentPlayerId,"");
   }


    @Test
    void getCurrentOccupiedCoordinates(){
        Move move = new Move();
        String stateString = "a 13 2; c 1 E; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,4 2,9 3,6 6,6 10,9 12,10 B 4,2 6,11 8,8 10,7 10,11 12,1 W 0,10 2,11 3,4 4,10 12,4 12,8 P 2,2 2,3 4,3 8,5 8,10 11,3 S 0,1 3,0 3,2 6,1 6,4 8,0 10,0 10,5; p 0 0 0 0 0 0 0 S 9,9 T; p 1 0 0 0 0 0 0 S T;";
        Set<String> CurrentOccupied = move.getCurrentOccupiedCoordinates(stateString);
        Assertions.assertTrue(CurrentOccupied.isEmpty());
    }

    @Test
    void testIsCoordinate() {
        Move move = new Move();

        Assertions.assertTrue(move.isCoordinate("1,2"));
        Assertions.assertTrue(move.isCoordinate("10,20"));
        Assertions.assertFalse(move.isCoordinate("1,2,3,4"));
        Assertions.assertFalse(move.isCoordinate("1.2"));
        Assertions.assertFalse(move.isCoordinate("12"));
        Assertions.assertFalse(move.isCoordinate("a,b"));
    }






    @Test
    void getLandCoordinates() {
        Move move = new Move();
        String stateString = "a 13 2; c 1 E; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,4 2,9 3,6 6,6 10,9 12,10 B 4,2 6,11 8,8 10,7 10,11 12,1 W 0,10 2,11 3,4 4,10 12,4 12,8 P 2,2 2,3 4,3 8,5 8,10 11,3 S 0,1 3,0 3,2 6,1 6,4 8,0 10,0 10,5; p 0 0 0 0 0 0 0 S 9,9 T; p 1 0 0 0 0 0 0 S T;";
        Set<String> expectedLand = new HashSet<>(Arrays.asList("0,1", "0,2", "0,3", "0,4", "1,1", "1,5", "2,0", "2,5", "3,0", "3,6", "4,0", "4,5", "5,1", "5,5", "6,1", "6,2", "6,3", "6,4", "0,8", "0,9", "0,10", "1,8", "1,11", "2,7", "2,11", "3,8", "3,11", "4,8", "4,9", "4,10", "8,8", "8,9", "8,10", "9,8", "9,11", "10,7", "10,11", "11,8", "11,11", "12,8", "12,9", "12,10", "10,0", "10,1", "10,4", "10,5", "11,0", "11,2", "11,3", "11,4", "11,6", "12,0", "12,1", "12,4", "12,5", "2,2", "2,3", "3,2", "3,4", "4,2", "4,3", "2,9", "6,6", "6,7", "6,8", "6,9", "6,10", "6,11", "7,6", "8,0", "8,1", "8,2", "8,3", "8,4", "8,5", "10,9"));
        Set<String> actualLand = move.getLandCoordinates(stateString);
        Assertions.assertEquals(expectedLand, actualLand);
    }


    @Test
    void getSeaCoordinates() {
        Move move = new Move();
        String stateString = "a 13 2; c 0 S; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,1 0,10 4,2 8,10 11,3 B 0,4 2,2 6,6 8,5 10,9 12,10 W 3,0 3,4 3,6 4,3 6,11 P 2,3 3,2 8,0 10,7 12,1 12,4 S 2,9 2,11 6,1 10,0 10,5 10,11 12,8; p 0 34 0 0 0 0 1 S 1,5 5,5 6,4 8,7 9,7 9,9 T 2,5 4,5 7,6 9,8; p 1 42 1 0 1 0 0 S 3,10 4,10 7,9 7,10 8,8 8,9 T 3,11 6,10;";
        Set<String> Land = new HashSet<>(Arrays.asList("0,1", "0,2", "0,3", "0,4", "1,1", "1,5", "2,0", "2,5", "3,0", "3,6", "4,0", "4,5", "5,1", "5,5", "6,1", "6,2", "6,3", "6,4", "0,8", "0,9", "0,10", "1,8", "1,11", "2,7", "2,11", "3,8", "3,11", "4,8", "4,9", "4,10", "8,8", "8,9", "8,10", "9,8", "9,11", "10,7", "10,11", "11,8", "11,11", "12,8", "12,9", "12,10", "10,0", "10,1", "10,4", "10,5", "11,0", "11,2", "11,3", "11,4", "11,6", "12,0", "12,1", "12,4", "12,5", "2,2", "2,3", "3,2", "3,4", "4,2", "4,3", "2,9", "6,6", "6,7", "6,8", "6,9", "6,10", "6,11", "7,6", "8,0", "8,1", "8,2", "8,3", "8,4", "8,5", "10,9"));
        Set<String> expectedSea = new HashSet<>(Arrays.asList("3,9", "4,11", "5,7", "7,5", "9,3", "5,8", "9,4", "5,9", "7,7", "9,5", "7,8", "9,6", "7,9", "9,7", "10,10", "9,9", "0,11", "8,11", "7,11", "3,12", "7,10", "3,10", "7,12", "11,1", "0,0", "2,1", "0,5", "4,1", "0,6", "2,4", "6,0", "11,9", "0,7", "2,6", "4,4", "11,7", "2,8", "4,6", "11,5", "4,7", "6,5", "8,6", "12,11", "8,7", "2,10", "5,12", "11,10", "11,12", "9,10", "1,12", "1,10", "5,10", "9,12", "5,11", "10,3", "12,2", "10,2", "1,0", "1,2", "1,3", "3,1", "1,4", "5,0", "3,3", "1,6", "5,2", "7,0", "12,7", "1,7", "3,5", "5,3", "7,1", "12,6", "5,4", "7,2", "9,0", "10,8", "1,9", "3,7", "7,3", "9,1", "5,6", "7,4", "9,2", "10,6", "12,3"));
        Set<String> actualSea = move.getSeaCoordinates(stateString,Land);
        Assertions.assertEquals(expectedSea, actualSea);
    }

    @Test
    void getBoardHeight(){
        Move move = new Move();
        String stateString = "a 13 2; c 1 E; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,4 2,9 3,6 6,6 10,9 12,10 B 4,2 6,11 8,8 10,7 10,11 12,1 W 0,10 2,11 3,4 4,10 12,4 12,8 P 2,2 2,3 4,3 8,5 8,10 11,3 S 0,1 3,0 3,2 6,1 6,4 8,0 10,0 10,5; p 0 0 0 0 0 0 0 S 9,9 T; p 1 0 0 0 0 0 0 S T;";
        int boardHeight = move.getBoardHeight(stateString);
        Assertions.assertEquals(13,boardHeight,"");
    }

    @Test
    void getNumPlayers(){
        Move move = new Move();
        String stateString = "a 13 2; c 1 E; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,4 2,9 3,6 6,6 10,9 12,10 B 4,2 6,11 8,8 10,7 10,11 12,1 W 0,10 2,11 3,4 4,10 12,4 12,8 P 2,2 2,3 4,3 8,5 8,10 11,3 S 0,1 3,0 3,2 6,1 6,4 8,0 10,0 10,5; p 0 0 0 0 0 0 0 S 9,9 T; p 1 0 0 0 0 0 0 S T;";
        int num = move.getNumPlayers(stateString);
        Assertions.assertEquals(2, num,"");
    }

    @Test
    void getRemainingSettlers(){
        Move move = new Move();
        String stateString = "a 13 2; c 1 E; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,4 2,9 3,6 6,6 10,9 12,10 B 4,2 6,11 8,8 10,7 10,11 12,1 W 0,10 2,11 3,4 4,10 12,4 12,8 P 2,2 2,3 4,3 8,5 8,10 11,3 S 0,1 3,0 3,2 6,1 6,4 8,0 10,0 10,5; p 0 0 0 0 0 0 0 S 9,9 T; p 1 0 0 0 0 0 0 S T;";
        int remainingSettlers = move.getRemainingSettlers(stateString,1,2);
        Assertions.assertEquals(30, remainingSettlers,"");
    }

    @Test
    void getRemainingVillages(){
        Move move = new Move();
        String stateString = "a 13 2; c 1 E; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,4 2,9 3,6 6,6 10,9 12,10 B 4,2 6,11 8,8 10,7 10,11 12,1 W 0,10 2,11 3,4 4,10 12,4 12,8 P 2,2 2,3 4,3 8,5 8,10 11,3 S 0,1 3,0 3,2 6,1 6,4 8,0 10,0 10,5; p 0 0 0 0 0 0 0 S 9,9 T; p 1 0 0 0 0 0 0 S T;";
        int remainingVillages = move.getRemainingVillages(stateString,1);
        Assertions.assertEquals(5, remainingVillages,"");
    }

    @Test
    void getPlayerSettlers() {
        Move move = new Move();
        String stateString = "a 13 2; c 1 E; i 5 0,1 0,2 0,3 0,4 1,1 1,5 2,0 2,5 3,0 3,6 4,0 4,5 5,1 5,5 6,1 6,2 6,3 6,4; i 5 0,8 0,9 0,10 1,8 1,11 2,7 2,11 3,8 3,11 4,8 4,9 4,10; i 7 8,8 8,9 8,10 9,8 9,11 10,7 10,11 11,8 11,11 12,8 12,9 12,10; i 7 10,0 10,1 10,4 10,5 11,0 11,2 11,3 11,4 11,6 12,0 12,1 12,4 12,5; i 9 2,2 2,3 3,2 3,4 4,2 4,3; i 9 2,9; i 9 6,6 6,7 6,8 6,9 6,10 6,11 7,6 8,0 8,1 8,2 8,3 8,4 8,5; i 9 10,9; s 0,1 0,4 0,10 2,2 2,3 2,9 2,11 3,0 3,2 3,4 3,6 4,2 4,3 4,10 6,1 6,4 6,6 6,11 8,0 8,5 8,8 8,10 10,0 10,5 10,7 10,9 10,11 11,3 12,1 12,4 12,8 12,10; r C 0,4 2,9 3,6 6,6 10,9 12,10 B 4,2 6,11 8,8 10,7 10,11 12,1 W 0,10 2,11 3,4 4,10 12,4 12,8 P 2,2 2,3 4,3 8,5 8,10 11,3 S 0,1 3,0 3,2 6,1 6,4 8,0 10,0 10,5; p 0 0 0 0 0 0 0 S 9,9 T; p 1 0 0 0 0 0 0 S T;";
        Set<String> settlers = move.getPlayerSettlers(stateString,1);
        Assertions.assertEquals("[]", settlers.toString());
    }

    @Test
    void getNeighbors() {
        Move move = new Move();
        Set<String> currentOccupied = new HashSet<>(Arrays.asList("0,5","7,11","3,7"));
        List<String> neighbors = move.getNeighbors(6,10,currentOccupied);
        Assertions.assertEquals("[7,11]", neighbors.toString(),"");
    }

}








